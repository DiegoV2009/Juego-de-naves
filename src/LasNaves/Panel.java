/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package LasNaves;

import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.sound.sampled.AudioSystem;


import javax.swing.Timer;


import javax.sound.sampled.Clip;

public class Panel extends javax.swing.JPanel implements ActionListener, KeyListener
{
    ObjetoDeJuego mapa;
    ObjetoDeJuego ganaj1;
    ObjetoDeJuego ganaj2;
    
    public Clip clip;
    public String ruta="/sonidos/";
 
    
    boolean moverEnemigoLado    = false;
    boolean moverEnemigoArriba  = false;
    boolean moverEnemigo2Lado   = false;
    boolean moverEnemigo2Arriba = false;
    
    
    Nave nave;
    Nave nave2;
    ObjetoDeJuego paredD;
    ObjetoDeJuego paredI;
    ObjetoDeJuego paredD2;
    ObjetoDeJuego paredI2;
    
   
    Nave enemigo;
    Nave enemigo2;
    //inicializar bala y con q pintarla
    Timer timer;
    
    public Panel() 
    {
      mapa = new ObjetoDeJuego("src/imagenes/espacio.jpg", 0,0,800,600);
        nave = new Nave("src/imagenes/gal.PNG", 400, 550,50 ,50);
        nave.ActivarColisionador();
        
        nave2 = new Nave("src/imagenes/nave2.PNG", 400, 0,50 ,50);
        nave2.ActivarColisionador();
        
        paredD = new ObjetoDeJuego("src/imagenes/pared.jpg", 800,560,5 ,5);
        paredD.ActivarColisionador();
        
        paredI = new ObjetoDeJuego("src/imagenes/pared.jpg", -6,560,5 ,5);
        paredI.ActivarColisionador();
        
        paredD2 = new ObjetoDeJuego("src/imagenes/pared.jpg", 800,0,5 ,5);
        paredD2.ActivarColisionador();
        
        paredI2 = new ObjetoDeJuego("src/imagenes/pared.jpg", -6,0,5 ,5);
        paredI2.ActivarColisionador();
        
        
        ganaj1 = new ObjetoDeJuego("src/imagenes/p1gana.png", 0,0,800,600);
        ganaj2 = new ObjetoDeJuego("src/imagenes/p2gana.png", 0,0,800,600);
            
       
         Sonar("Inicio");
        inicializarTemporizador();
        inicializarTeclado();
        initComponents();
        
    }
    
    public void Sonar(String tono)
    {
        try
        {
            clip=AudioSystem.getClip();
            clip.open(AudioSystem.getAudioInputStream(getClass().getResource(ruta+ tono +".wav")));
            clip.start();
        }
        catch(Exception e)
        {
                    
        }        
    }        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void paintComponent(Graphics g)
    {
         super.paintComponent(g);
        
        mapa.Pintar(g);
        nave.    Pintar(g);
        nave2.   Pintar(g);
        paredD.  Pintar(g);
        paredI.  Pintar(g);
       
        
        
        if(puntos1 > 15)
        {
            ganaj1.Pintar(g);
        }
        if(puntos2 > 15)
        {
            ganaj2.Pintar(g);
        }    
    }

    private void inicializarTemporizador() 
    {
        timer = new Timer(16, this);
        timer.start();
    }
    
    
    int velocidadDeDisparo;
    int muertos = 0;
    int disparoEnemigos;
    @Override
    public void actionPerformed(ActionEvent e) 
    {    
        velocidadDeDisparo++;
        Actualizar();
        repaint();
        disparoEnemigos++;   
        
    }
    
    
    

    /**
     * Se ejecuta cuando la tecla se presiona y se suelta
     * @param e 
     */
    @Override
    public void keyTyped(KeyEvent e) {
        
    }

    /**
     * Se ejcuta cuando la tecla se presiona
     * @param e 
     */
    @Override
    public void keyPressed(KeyEvent e)
    {
        //La tecla que se presiono
        int tecla;
        tecla = e.getKeyCode();
        
         switch(tecla)
        {
            case KeyEvent.VK_RIGHT :
                nave.dir = Direccion.derecha;
            break;        
            case KeyEvent.VK_LEFT:
                nave.dir = Direccion.izquierda;
            break;
            case KeyEvent.VK_DOWN:
                if(velocidadDeDisparo > 15)
                {
                    nave.Disparar();
                    velocidadDeDisparo =0;
                    Sonar("Disparo");
                }
            break;
            case KeyEvent.VK_D :
                nave2.dir = Direccion.derecha;
            break;        
            case KeyEvent.VK_A:
                nave2.dir = Direccion.izquierda;
            break;
            case KeyEvent.VK_S:
                if(velocidadDeDisparo > 15)
                {
                    nave2.DispararAbajo();
                    velocidadDeDisparo =0;
                    Sonar("Disparo");
                }
            break;
           
        }    
        
    }

    int choque1 = 0;
    int choque2 = 0;
    /**
     * Se ejecuta cuando la tecla se suelta
     * @param e 
     */
    @Override
    public void keyReleased(KeyEvent e) 
    {
          int tecla;
        tecla = e.getKeyCode();
        
        switch(tecla)
        {
            case KeyEvent.VK_RIGHT :  
            case KeyEvent.VK_LEFT :
            nave.dir = Direccion.ninguna;
            case KeyEvent.VK_D :  
            case KeyEvent.VK_A : 
            nave2.dir = Direccion.ninguna;    
            break;
        }  
    }

   
    private void inicializarTeclado() 
    {
                
        
        addKeyListener(this);
        setFocusable(true);
    }
    
    int puntos1=0;
    int puntos2=0;
   
    private void Actualizar() 
    {
        
          
       
             
        
        nave.Actualizar();
        nave2.Actualizar();
        if(nave.ChocaCon(paredI))
        {
            nave.MoverA(3, 550);
        }    
        if(nave.ChocaCon(paredD))
        {
            nave.MoverA(740, 550);
        }    
        
        if(nave2.ChocaCon(paredI2))
        {
            nave2.MoverA(3, 0);
        }    
        if(nave2.ChocaCon(paredD2))
        {
            nave2.MoverA(740, 0);
        }    
        
        if (nave.ChequearExplosiones(nave2) == true)
        {
            puntos1++;
            choque1++;
            if(choque1>5)
            {
                Sonar("Explosion");
                choque1=0;
            }
             if(puntos1 >15)
            {
                Sonar("Ganar");
            }    
        }    
        if (nave2.ChequearExplosiones2(nave) == true)
        {
            puntos2++;
            choque2++;
            if(choque2>5)
            {
                Sonar("Explosion");
                choque2=0;
            }
            if(puntos2 >15)
            {
                Sonar("Ganar");
            }    
        }    
        
        
        
    }

   
   
            
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
